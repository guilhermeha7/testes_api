{
	"info": {
		"_postman_id": "722931c3-ef7d-4de4-814d-3491aa20b2cd",
		"name": "Exercício Testes de API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38350378"
	},
	"item": [
		{
			"name": "Usuários",
			"item": [
				{
					"name": "Listar Usuários",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deve listar usuários com sucesso\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}usuarios",
							"host": [
								"{{url}}usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastrar Usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Deve cadastrar usuário com sucesso\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"\r",
									"/*\r",
									"pm.test(\"Não deve permitir cadastro com e-mail já utilizado\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(pm.response.text()).to.include(\"Este email já está sendo usado\");\r",
									"});\r",
									"*/\r",
									"\r",
									"\r",
									"/*\r",
									"pm.test(\"Não deve permitir cadastro com e-mail em formato inválido\", function () {\r",
									"    pm.response.to.have.status(400);    \r",
									"    pm.expect(pm.response.text()).to.include(\"email deve ser um email válido\");\r",
									"});\r",
									"*/\r",
									"\r",
									"\r",
									"/*\r",
									"pm.test(\"Não deve permitir cadastro com algum dado obrigatório em branco\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"não pode ficar em branco\");\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"*/\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Novo Nome\",\r\n  \"email\": \"novonome@gmail.com\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}usuarios",
							"host": [
								"{{url}}usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar Um Usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deve buscar um usuário com sucesso\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.text()).to.include(\"jMifNpMCTxMt25WV\");\r",
									"});\r",
									"\r",
									"\r",
									"/*\r",
									"pm.test(\"Não deve encontrar usuário inexistente na busca\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(pm.response.text()).to.include(\"Usuário não encontrado\");\r",
									"});\r",
									"*/\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}usuarios/jMifNpMCTxMt25WV",
							"host": [
								"{{url}}usuarios"
							],
							"path": [
								"jMifNpMCTxMt25WV"
							]
						}
					},
					"response": []
				},
				{
					"name": "Alterar Usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deve alterar informações de um usuário existente com sucesso\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
									"});\r",
									"\r",
									"\r",
									"/*\r",
									"pm.test(\"Deve realizar cadastro, caso não seja encontrado o usuário com o id informado para realizar alterações e caso o email não esteja cadastrado\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"*/\r",
									"\r",
									"\r",
									"/*\r",
									"pm.test(\"Não deve permitir cadastro com e-mail já utilizado\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(pm.response.text()).to.include(\"Este email já está sendo usado\");\r",
									"});\r",
									"*/\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Teste Alterado\",\r\n  \"email\": \"testealterado@qa.com\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}usuarios/jMifNpMCTxMt25WV",
							"host": [
								"{{url}}usuarios"
							],
							"path": [
								"jMifNpMCTxMt25WV"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletar Usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deve excluir um usuário com sucesso\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
									"});\r",
									"\r",
									"\r",
									"/*\r",
									"pm.test(\"Não deve ser permitido excluir usuário com carrinho\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(pm.response.text()).to.include(\"Não é permitido excluir usuário com carrinho cadastrado\");\r",
									"});\r",
									"*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}usuarios/MH953ngj4RzDx7yE",
							"host": [
								"{{url}}usuarios"
							],
							"path": [
								"MH953ngj4RzDx7yE"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Carrinhos",
			"item": [
				{
					"name": "Listar Carrinhos Cadastrados",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}carrinhos",
							"host": [
								"{{url}}carrinhos"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}